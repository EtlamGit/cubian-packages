#!/bin/bash 

set -e

MMC="/dev/mmcblk0"
MMCP1="${MMC}p1"
MBR_BAK="/root/mmcblk0_mbr.bak"

COLOR_NORMAL=$(echo -e "\033[m")
COLOR_BLUE=$(echo -e "\033[36m")
COLOR_GREEN=$(echo -e "\033[32m")

if [ "`id -u`" -ne "0" ]; then
  echo "This script needs to be run as root, try again with sudo"
  exit -1
fi

promptyn () {
while true; do
  read -p "$1 " yn
  case $yn in
    [Yy]* ) return 0;;
    [Nn]* ) return 1;;
    * ) echo "Please answer yes or no.";;
  esac
done
}

if ! promptyn \
"
This script will resize cubian to occupy the full space on the SD-card
by default. or you can use $0 SECTOR_END_POSITION to specify the size will be 
occupied.

*** IMPORTANT NOTICE, PLEASE READ CAREFULLY ***

This script use fdisk to delete the first partition on SD-card then re-create
it with a larger partition size.

Your SD-card should only contains 1 partition for rootfs, otherwise it won't
work. If you are using cubian before r4, you have to delete the swap partition
manaually, then run this script.

The scirpt is recommended on a clean install of cubian. Otherwise you should 
backup your important files on your SD-card because modify partition table is 
always risky.

The current working partition table will be saved to $MBR_BAK, you may save it
to ANOTHER storage media (eg. nand). Then you could restore the partion table 
later without losing any files in case of any failure occured.

dd if={PATH_TO_MBR_BAK} of=/dev/{MMC_DEVICE} bs=1 count=64 skip=446 seek=446

***

Continue?[y/n]";then
	exit 0
fi

IFS=

if [[ ! -b $MMC ]];then
	echo "error: not a block device $MMC"
	exit 1
fi

PART_INFO=$(fdisk -l $MMC)
PARTITIONS_COUNT=$(grep -c 'mmcblk0p[0-9][0-9]*' /proc/partitions)

SECTORS_TOTAL=$(echo $PART_INFO | grep total | awk '{print $8}')
BOOT_START=$(echo $PART_INFO | grep $MMCP1 | awk '{print $2}')

if [[ "$PARTITIONS_COUNT" != "1" ]];then
	echo "error: more than 1 partiton on ${MMC}"
	exit 1
fi

if [[ -z $BOOT_START ]];then
	echo "error: get BOOT_START"
	exit 1
fi

if [[ -z $SECTORS_TOTAL ]];then
	echo "error: get SECTORS_TOTAL "
	exit 1
fi

# make sure BOOT_START is a number
BOOT_START=$(expr $BOOT_START + 0)

SECTORS_END_MAX=$(expr $SECTORS_TOTAL - 1)
SECTORS_END=${1:-"$SECTORS_END_MAX"}

if [[ $SECTORS_END -gt $SECTORS_END_MAX ]];then
	echo "error: SECTORS_END must not more than $SECTORS_END_MAX"
	exit 1
fi

# backup MBR
echo "backup current MBR to $MBR_BAK"
dd if=$MMC of=$MBR_BAK bs=512 count=1>/dev/null 2>&1

set +e
echo "
p
d
1
p
n
p
1
${BOOT_START}
${SECTORS_END}
p
w
q
" | fdisk $MMC > /dev/null

echo "${COLOR_GREEN}*** success, please reboot then run ${COLOR_NORMAL}${COLOR_BLUE}resize2fs $MMCP1${COLOR_NORMAL}"

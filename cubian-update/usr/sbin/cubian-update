#!/bin/bash

set -e

VERSION="1.3.4"

RAW_ARGS="$@"

GIT_SSL_VERIFY="false"
GIT_PROXY=$(echo ${http_proxy:-$HTTP_PROXY} | sed -e "s/^https*:\/\///I")

UPDATE_SELF=${UPDATE_SELF:-1}
SELF_UPDATE_SCRIPT="/root/.cubian-update-self.sh"

# normalize path
ROOT_PATH=${ROOT_PATH:-"/"}
# remove trailing slashes
ROOT_PATH=$(echo "${ROOT_PATH}" | sed -e "s/\/*$//")
# add a traingling slash
ROOT_PATH="${ROOT_PATH}/"

FW_REPO=
FW_REPO_RELEASE="https://github.com/cubieplayer/cubian-updates.git"
FW_REPO_TEST="https://github.com/mmplayer/cubian-updates.git"

# these are old repositories used by cubian-update
# it's safe to delete them now to release more space for user
FW_REPO_LOCAL_OLD1="${ROOT_PATH}root/.cubian-update"
FW_REPO_LOCAL_OLD2="${ROOT_PATH}root/.cubian-firmware"

FW_REPO_LOCAL="${ROOT_PATH}root/.cubian-updates"
FW_MOD_PATH="${ROOT_PATH}lib/modules"
FW_REVISION=".update_revision"
FW_CURRENT_REV="${FW_REPO_LOCAL}/${FW_REVISION}"
GIT_CMD="git --git-dir=\"${FW_REPO_LOCAL}/.git\" --work-tree=\"${FW_REPO_LOCAL}\""

FSTAB="${ROOT_PATH}etc/fstab"

MMC_DEVICE="/dev/mmcblk0"
NAND_DEVICE="/dev/nand"
# should be /dev/sda, but it could be sdb,sdc etc,
SATA_DEVICE="/dev/sd"

NAND1_DEVICE="/dev/nand1"
NANDA_DEVICE="/dev/nanda"

CPU_INFO="/proc/cpuinfo"

NAND_BOOT_PART=
NAND_BOOT_MOUNT_POINT="${ROOT_PATH}root/nand-bootloader"

NAME_UBOOT_BIN="u-boot.bin"
NAME_UENV_TXT="uEnv.txt"
NAME_BOOT_SCR="boot.scr"
NAME_SCRIPT_BIN="script.bin"

UBOOT_MMC_UPDATE="${FW_REPO_LOCAL}/u-boot-sunxi-with-spl-mmc.bin"
UBOOT_NAND_UPDATE="${FW_REPO_LOCAL}/u-boot-nand.bin"
UENV_TXT_UPDATE="${FW_REPO_LOCAL}/boot/${NAME_UENV_TXT}"
BOOT_SCR_UPDATE="${FW_REPO_LOCAL}/boot/${NAME_BOOT_SCR}"
SCRIPT_BIN_UPDATE="${FW_REPO_LOCAL}/boot/${NAME_SCRIPT_BIN}"

OPT_VERBOSE=false
OPT_REINSTALL=false
OPT_TEST=false
OPT_CLEAN=false
OPT_REVERT_FIRMWARE=false
OPT_SKIP_KERNEL=false
OPT_SKIP_MODULES=false
OPT_SKIP_ROOTFS=false
OPT_UPDATE_BOOTLOADER=false
OPT_UPDATE_BOARD_CFG=false

COLOR_NORMAL=$(echo -e "\033[m")
COLOR_BLUE=$(echo -e "\033[36m")
COLOR_GREEN=$(echo -e "\033[32m")
COLOR_YELLOW=$(echo -e "\033[33m")
COLOR_GRAY=$(echo -e "\033[37m")
COLOR_RED=$(echo -e "\033[31m")

SYS_INSTALL_TYPE_NAND="nand"
SYS_INSTALL_TYPE_MMC="mmc"
SYS_INSTALL_TYPE_SATA="sata"

SYS_INSTALL_TYPE=

BRANCH_A10="a10"
BRANCH_A20="a20"
BRANCH=

usage(){
cat<<EOF
Usage: $0 options

This script will update your system files to the latest version. It respects the
environment variable ROOT_PATH, it sets to '/' by default.

It will update itself automatically. You can set environment variable UPDATE_SELF=0
to disable it.

You can also export an environment variable http_proxy (case insensitive) to use a 
proxy server while updating.

Options:
  -h,--help               Show this message
  -r,--reinstall          Perform reinstallation of the updates
  -v,--verbose            Verbose output
  -c,--clean              Clean up everything, redownload updates from server
     --revert-firmware    Revert firmware to previous release.

Exclusive Options:
     --skip-kernel        Skip to update kernel
     --skip-modules       Skip to update modules
     --skip-rootfs        Skip to update files on /

Inclusive Options:
     --update-bootloader  Update bootloader(u-boot)
     --update-board-cfg   Update board config(script.bin)
EOF
}

if ! OPTIONS=$(getopt -o hrvct -l help \
-l reinstall \
-l verbose \
-l clean \
-l revert \
-l revert-firmware \
-l skip-kernel \
-l skip-modules \
-l skip-rootfs \
-l update-bootloader \
-l update-board-cfg \
-- ${RAW_ARGS});then
	usage
	exit 1
fi

set -- $OPTIONS

while [ $# -gt 0 ];do
	case $1 in
		-h|--help)
			usage
			exit 0
			;;
		-r|--reinstall)
			OPT_REINSTALL=true
			;;
		-v|--verbose) 
			OPT_VERBOSE=true
			;;
		-c|--clean) 
			OPT_CLEAN=true
			;;
		-t) 
			OPT_TEST=true
			;;
		--revert|--revert-firmware)
			OPT_REVERT_FIRMWARE=true
			;;
		--skip-kernel)
			OPT_SKIP_KERNEL=true
			;;
		--skip-modules)
			OPT_SKIP_MODULES=true
			;;
		--skip-rootfs)
			OPT_SKIP_ROOTFS=true
			;;
		--update-bootloader)
			OPT_UPDATE_BOOTLOADER=true
			;;
		--update-board-cfg)
			OPT_UPDATE_BOARD_CFG=true
			;;
		(--) 
			shift; 
			break
			;;
		(-*) 
			echo "$0: error - unrecognized option $1" 1>&2
			exit 1
			;;
    	(*) 
			break
			;;
	esac
	shift
done

debug(){
	if $OPT_VERBOSE;then
		echo $1
	fi
}

backup(){
	opt="-f"
	if $OPT_VERBOSE;then
		opt="${opt}v"
	fi
	if [[ -d $1 ]];then
		opt="${opt}r"
	fi
	cp $opt $1 "$1.bak"
}

skipOpt2str(){
	if $1;then
		echo "no"
	else
		echo "yes"
	fi
}

bool2str(){
	if $1;then
		echo "yes"
	else
		echo "no"
	fi
}

checkRootPath(){
	if [[ ! -d ${ROOT_PATH}lib/modules ]] ||\
	   	[[ ! -d ${ROOT_PATH}boot ]] ||\
	   	[[ ! -f $FSTAB ]];then
		return 1
	fi
	return 0
}

determineBranchManually(){
while true;do
	read -p "${COLOR_YELLOW}What's your device type, a10 or a20?${COLOR_NORMAL}" given_branch
	case $given_branch in
		[aA]10) BRANCH="$BRANCH_A10";break;;
		[aA]20) BRANCH="$BRANCH_A20";break;;
		*) echo "Invalid device type. Please type a10 or a20."
	esac
done
}

determineBranch(){
	set +e
	if [[ -f $CPU_INFO ]];then
		if cat $CPU_INFO | grep -q 'sun4i';then
			BRANCH="$BRANCH_A10"
		elif cat $CPU_INFO | grep -q 'sun7i';then
			BRANCH="$BRANCH_A20"
		else
			determineBranchManually
		fi
	else
		determineBranchManually
	fi
	set -e
}

determineSysInstallType(){
	set +e
	cat $FSTAB | awk '{if($2=="/") {print $1}}' | grep -q $MMC_DEVICE && \
		SYS_INSTALL_TYPE="$SYS_INSTALL_TYPE_MMC"
	if [[ -z $SYS_INSTALL_TYPE ]];then
		cat $FSTAB | awk '{if($2=="/") {print $1}}' | grep -q $NAND_DEVICE && \
		SYS_INSTALL_TYPE="$SYS_INSTALL_TYPE_NAND"
	fi
	if [[ -z $SYS_INSTALL_TYPE ]];then
		cat $FSTAB | awk '{if($2=="/") {print $1}}' | grep -q $SATA_DEVICE && \
		SYS_INSTALL_TYPE="$SYS_INSTALL_TYPE_SATA"
	fi
	set -e
}

echoBlue(){
	echo "${COLOR_BLUE}${1}${COLOR_NORMAL}"
}

echoRed(){
	echo "${COLOR_RED}${1}${COLOR_NORMAL}"
}

echoGreen(){
	echo "${COLOR_GREEN}${1}${COLOR_NORMAL}"
}

echoYellow(){
	echo "${COLOR_YELLOW}${1}${COLOR_NORMAL}"
}

doSetProxy(){
	if [ -n "$GIT_PROXY" ];then
		eval ${GIT_CMD} config http.proxy "$GIT_PROXY"
	else
		# Will fail if http.proxy is not set
		# We simply ignore this error rather than double checking
		set +e
		eval ${GIT_CMD} config --unset http.proxy
		set -e
	fi
	eval ${GIT_CMD} config http.sslVerify "$GIT_SSL_VERIFY"
}

setProxy(){
	if $OPT_VERBOSE;then
		debug "Apply proxy setting $GIT_PROXY"
		doSetProxy
	else
		doSetProxy > /dev/null 2>&1
	fi
}

deleteFirmwareRepo(){
	rm -rf ${FW_REPO_LOCAL}
}

createFirmwareRepo(){
	mkdir -p "${FW_REPO_LOCAL}"
	if $OPT_VERBOSE;then
		git init "${FW_REPO_LOCAL}"
		setProxy
		debug "Add remote origin ${FW_REPO}"
		eval ${GIT_CMD} remote add origin ${FW_REPO}
	else
		git init "${FW_REPO_LOCAL}" > /dev/null 2>&1
		setProxy
		eval ${GIT_CMD} remote add origin "${FW_REPO}" > /dev/null 2>&1
	fi
}

updateFirmwareRepo(){
	echoBlue "*** Downloading Firmware/Updates (this may take a while)"

	set +e
	if $OPT_VERBOSE;then
		eval ${GIT_CMD} fetch origin --tags
	else
		eval ${GIT_CMD} fetch origin --tags > /dev/null 2>&1
	fi
	RETVAL=$?
	set -e
	if [[ ${RETVAL} -ne 0 ]]; then
		echoRed "!!! An error occurred on downloading firmware, Please use verbose output for more details"
		deleteFirmwareRepo
		exit 1
	fi
}

setFirmwareRepoUrl(){
	debug "set firmware url to ${FW_REPO}"
	if $OPT_VERBOSE;then
		eval ${GIT_CMD} remote -v set-url origin $FW_REPO
	else
		eval ${GIT_CMD} remote set-url origin $FW_REPO
	fi
}

updateKernel(){
	echoBlue "*** Updating kernel"
	set +e
	if $OPT_VERBOSE;then
		echo -n "${COLOR_GRAY}"
		# uImage, uImage-3.4.79-sun4i
		cp -vd "${FW_REPO_LOCAL}/boot/uImage*" "${ROOT_PATH}boot" 2>/dev/null
		# config-3.4.79-sun4i
		cp -vd "${FW_REPO_LOCAL}/boot/config*" "${ROOT_PATH}boot" 2>/dev/null
		# System.map-3.4.79-sun4i
		cp -vd "${FW_REPO_LOCAL}/boot/System*" "${ROOT_PATH}boot" 2>/dev/null
		echo -n "${NORMAL}"
	else
		cp -d "${FW_REPO_LOCAL}/boot/uImage*" "${ROOT_PATH}boot" 2>/dev/null
		cp -d "${FW_REPO_LOCAL}/boot/config*" "${ROOT_PATH}boot" 2>/dev/null
		cp -d "${FW_REPO_LOCAL}/boot/System*" "${ROOT_PATH}boot" 2>/dev/null
	fi
	set -e
}

updateModules(){
	echoBlue "*** Updating modules"
	set +e
	if $OPT_VERBOSE;then
		echo -n "${COLOR_GRAY}"
		cp -dvR "${FW_REPO_LOCAL}/modules/*" "${FW_MOD_PATH}/" 2>/dev/null
		echo -n "${NORMAL}"
	else
		cp -dR "${FW_REPO_LOCAL}/modules/*" "${FW_MOD_PATH}/" 2>/dev/null
	fi
	find "${FW_REPO_LOCAL}/modules" -mindepth 1 -maxdepth 1 -type d | while read DIR; do
			echoBlue "*** Depmod $(basename "${DIR}")"
			depmod -b "${ROOT_PATH}" -a $(basename "${DIR}")
	done
	set -e
}

updateFS(){
	echoBlue "*** Updating fs"
	set +e
	if $OPT_VERBOSE;then
		echo -n "${COLOR_GRAY}"
		cp -dvR "${FW_REPO_LOCAL}/fs/*" "${ROOT_PATH}" 2>/dev/null
		echo -n "${NORMAL}"
	else
		cp -dR "${FW_REPO_LOCAL}/fs/*" "${ROOT_PATH}" 2>/dev/null
	fi
	set -e
}

acquireMMCDevice(){
while true;do
	read -p "${COLOR_YELLOW}Please type in your SD-device(eg. /dev/sdb).${COLOR_NORMAL}" given_device
	case $given_device in
		*)
			if [[ -b $given_device ]];then
				MMC_DEVICE="$given_device"
				break;
			elif [[ -z $given_device ]];then
				echo "device can not be empty"
			else
				echo "$given_device is not valid block device"
			fi
			;;
	esac
done
}

updateBootLoaderMMC(){
	echoBlue "*** Updating bootloader on SD-Card"
	if [[ -f $UBOOT_MMC_UPDATE ]];then
		if $OPT_VERBOSE;then
			debug "Write u-boot to SD-Card"
			dd if=$UBOOT_MMC_UPDATE of=$MMC_DEVICE bs=1024 seek=8
		else
			dd if=$UBOOT_MMC_UPDATE of=$MMC_DEVICE bs=1024 seek=8 > /dev/null 2>&1
		fi
	fi
}

updateBootLoaderNAND(){
	echoBlue "*** Updating bootloader on NAND"

	mkdir -p $NAND_BOOT_MOUNT_POINT

	if [[ -b $NAND1_DEVICE ]];then
		mount $NAND1_DEVICE $NAND_BOOT_MOUNT_POINT
	elif [[ -b $NANDA_DEVICE ]];then
		mount $NANDA_DEVICE $NAND_BOOT_MOUNT_POINT
	fi

	if [[ -f $UBOOT_NAND_UPDATE ]];then
		uboot_nand_dest=$(find $NAND_BOOT_MOUNT_POINT -name "$NAME_UBOOT_BIN")
		
		if $OPT_VERBOSE;then
			debug "Overwrite u-boot to on nand boot partition"
			cp -v $UBOOT_NAND_UPDATE $uboot_nand_dest
		else
			cp $UBOOT_NAND_UPDATE $uboot_nand_dest
		fi
	fi

	if [[ -f $UENV_TXT_UPDATE ]];then
		uenv_txt_dest="${ROOT_PATH}boot/${NAME_UENV_TXT}"
		backup $uenv_txt_dest
		if $OPT_VERBOSE;then
			debug "Update uEnv.txt"
			cp -v $UENV_TXT_UPDATE $uenv_txt_dest
		else
			cp $UENV_TXT_UPDATE $uenv_txt_dest
		fi
	fi

	umount -l $NAND_BOOT_MOUNT_POINT

	rm -rf $NAND_BOOT_MOUNT_POINT

}

updateBootLoaderSATA(){
echoBlue "*** Updating bootloader on SATA"
while true;do
	read -p "${COLOR_YELLOW}Your rootfs is on SATA, where is your bootloader? Please type in mmc or nand.${COLOR_NORMAL}" sata_bootloader_device
	case $sata_bootloader_device in
		mmc)
			updateBootLoaderMMC
			break;;
		nand)
			updateBootLoaderNAND
			break;;
		*)
			echo "$sata_bootloader_device is not valid"
	esac
done
}

updateBoardCfg(){
	echoBlue "*** Updating bootloader configuration(script.bin)"

	if [[ -f $SCRIPT_BIN_UPDATE ]];then
		local script_bin_dest="${ROOT_PATH}boot/${NAME_SCRIPT_BIN}"
		backup $script_bin_dest
		if $OPT_VERBOSE;then
			debug "update script.bin"
			cp -v $SCRIPT_BIN_UPDATE $script_bin_dest
		else
			cp $SCRIPT_BIN_UPDATE $script_bin_dest
		fi
	fi
}

updateFirmware(){
	echoBlue "*** Updating firmware"
	if [[ -z "$1" ]];then
		# which is the latest tag
		tagname=$(eval ${GIT_CMD} tag -l ${BRANCH}* | tail -n 1)
		if $OPT_VERBOSE;then
			debug "Using tag $tagname which is latest in local repository"
		fi
	else
		tagname="$1"
		if $OPT_VERBOSE;then
			debug "As requested using tag $tagname from local repository"
		fi
	fi

	if $OPT_VERBOSE;then
		set +e
		eval ${GIT_CMD} checkout tags/${tagname}
		local checkout_tag_success=$?
		set -e
	else
		set +e
		eval ${GIT_CMD} checkout tags/${tagname} > /dev/null 2>&1
		local checkout_tag_success=$?
		set -e
	fi

	if [[ ${checkout_tag_success} -ne 0 ]];then
		echoRed "!!! An error occurred, Please re-run the program"
		deleteFirmwareRepo
		exit 2
	fi

	if ! $OPT_SKIP_KERNEL;then
		updateKernel
	else
		echoBlue "*** As requested, not updating kernel"
	fi

	if ! $OPT_SKIP_MODULES;then
		updateModules
	else
		echoBlue "*** As requested, not updating modules"
	fi

	if ! $OPT_SKIP_ROOTFS;then
		if [[ -d "${FW_REPO_LOCAL}/fs" ]];then
			updateFS
		fi
	else
		echoBlue "*** As requested, not updating rootfs"
	fi

	if $OPT_UPDATE_BOOTLOADER;then
		echoBlue "*** As requested, updating bootloader(u-boot)"
		if [[ -b $MMC_DEVICE ]] && \
			[[ "$SYS_INSTALL_TYPE" = "$SYS_INSTALL_TYPE_MMC" ]] && \
			([[ -f $UBOOT_MMC_UPDATE ]]);then
			updateBootLoaderMMC
		elif [[ -b $NAND_DEVICE ]] && \
			[[ "$SYS_INSTALL_TYPE" = "$SYS_INSTALL_TYPE_NAND" ]] && \
			([[ -f $UBOOT_NAND_UPDATE ]] || [[ -f $UENV_TXT_UPDATE ]]);then
			updateBootLoaderNAND
		elif [[ "$SYS_INSTALL_TYPE" = "$SYS_INSTALL_TYPE_SATA" ]];then
			updateBootLoaderSATA
		elif [[ ! -b $MMC_DEVICE ]] && \
			[[ "$ROOT_PATH" != "/" ]] && \
			[[ "$SYS_INSTALL_TYPE" = "$SYS_INSTALL_TYPE_MMC" ]] && \
			([[ -f $UBOOT_MMC_UPDATE ]]);then
			# ask user for MMC device
			acquireMMCDevice
			updateBootLoaderMMC
		else
			echoYellow "warning: bootloader is not updated"
		fi
	fi

	if $OPT_UPDATE_BOARD_CFG;then
		echoBlue "*** As requested, updating board configurations(script.bin)"
		updateBoardCfg
	fi

	if [[ -z "$2" ]];then
		echoGreen "*** Update success, A reboot is needed for changes to take effects"
	fi

	echo "$tagname" > "${FW_CURRENT_REV}"
}

installUpdates(){
	echoGreen "*** Checking updates from server"
	debug "Checking updates from server ${FW_REPO}"

	# get latest tag from remote
	if [[ "$BRANCH" = "$BRANCH_A10" ]];then
		fw_remote_tag=$(eval ${GIT_CMD} ls-remote --tags origin refs/tags/${BRANCH}*[^}] | awk '{print $2}' | sort -n | tail -n 1 | cut -c 11-)
	elif [[ "$BRANCH" = "$BRANCH_A20" ]];then
		fw_remote_tag=$(eval ${GIT_CMD} ls-remote --tags origin refs/tags/${BRANCH}*[^}] | awk '{print $2}' | sort -n | tail -n 1 | cut -c 11-)
	fi

	if [[ -z $fw_remote_tag ]];then
		echoRed "error: fail to fetch update information"
		exit 1
	fi

	fw_local_tag=$(cat "${FW_CURRENT_REV}")

	debug "Remote revision: ${fw_remote_tag}"
	debug "Local revision: ${fw_local_tag}"

	if [[ "$fw_local_tag" == "$fw_remote_tag" ]]; then
		echoGreen "*** Your firmware is up to date"
	else
		updateFirmwareRepo 
		updateFirmware $fw_remote_tag
	fi
}

updateSelf(){
	echoBlue "*** Performing self-update"

if $OPT_VERBOSE;then
	cat > $SELF_UPDATE_SCRIPT <<EOF
set -e

rm -- "\$0"

rm -rf /var/lib/apt/lists/

apt-get update
apt-get install -y cubian-update

exec env UPDATE_SELF=0 /bin/bash "$0" "$RAW_ARGS"
EOF
else
	cat > $SELF_UPDATE_SCRIPT <<EOF
set -e

rm -- "\$0"

rm -rf /var/lib/apt/lists/

apt-get update > /dev/null 2>&1
apt-get install -y cubian-update > /dev/null 2>&1

exec env UPDATE_SELF=0 /bin/bash "$0" "$RAW_ARGS"
EOF
fi
exec /bin/bash $SELF_UPDATE_SCRIPT
}

# main
if [[ ${EUID} -ne 0 ]]; then
	echoRed "!!! This tool must be run as root"
	exit 1
fi

if [[ -d $FW_REPO_LOCAL_OLD1 ]];then
	debug "remove old repository $FW_REPO_LOCAL_OLD1"
	if $OPT_VERBOSE;then
		rm -rvf $FW_REPO_LOCAL_OLD1
	else
		rm -rf $FW_REPO_LOCAL_OLD1
	fi
fi

if [[ -d $FW_REPO_LOCAL_OLD2 ]];then
	debug "remove old repository $FW_REPO_LOCAL_OLD2"
	if $OPT_VERBOSE;then
		rm -rvf $FW_REPO_LOCAL_OLD2
	else
		rm -rf $FW_REPO_LOCAL_OLD2
	fi
fi

if [[ ${UPDATE_SELF} -ne 0 ]]; then
	updateSelf
	exit 0
else
	echoBlue "*** Cubian updater v${VERSION} http://cubian.org"
fi

if ! checkRootPath;then
	echoRed "error: can't update, please correct ROOT_PATH. The current value is $ROOT_PATH"
	exit
fi

if $OPT_TEST;then
	FW_REPO="$FW_REPO_TEST"
else
	FW_REPO="$FW_REPO_RELEASE"
fi

if $OPT_CLEAN;then
	echoBlue "*** Perform clean"
	if $OPT_VERBOSE;then
		rm -rfv $FW_REPO_LOCAL
	else
		rm -rf $FW_REPO_LOCAL
	fi
	echoGreen "*** Clean success"
	exit 0
fi

debug "Update From: ${FW_REPO}"
debug "Proxy:${GIT_PROXY}"
debug "Root Path: ${ROOT_PATH}"
debug "Update Kernel: $(skipOpt2str ${OPT_SKIP_KERNEL})"
debug "Update Modules: $(skipOpt2str ${OPT_SKIP_MODULES})"
debug "Update Rootfs: $(skipOpt2str ${OPT_SKIP_ROOTFS})"
debug "Update Bootloader: $(bool2str ${OPT_UPDATE_BOOTLOADER})"
debug "Update Board configuration: $(bool2str ${OPT_UPDATE_BOARD_CFG})"

determineBranch
if [[ -z $BRANCH ]];then
	echoRed "error: can't update, failed to detect device type"
	exit
fi
debug "Branch: $BRANCH"

determineSysInstallType
if [[ -z $SYS_INSTALL_TYPE ]];then
	echoRed "error: can't update, failed to detect system type"
	exit
fi
debug "SysInstallType: $SYS_INSTALL_TYPE"

if [[ ! -f "${FW_REPO_LOCAL}/.git/config" ]];then
	createFirmwareRepo
	updateFirmwareRepo
fi

setFirmwareRepoUrl
setProxy
if $OPT_REVERT_FIRMWARE;then
	# revert to previous tag based on current tag
	if [[ ! -f ${FW_CURRENT_REV} ]];then
		echoRed "*** Revert firmware failed, missing file ${FW_CURRENT_REV}, try again with --reinstall then revert"
		exit 2
	fi
	current_tagname=$(cat "${FW_CURRENT_REV}")
	previous_tagname=$(eval ${GIT_CMD} tag -l ${BRANCH}* | awk '{if($1==current_tag){print p};p=$1}' current_tag=$current_tagname)
	if [[ -z $previous_tagname ]];then
		echoRed "*** Revert firmware failed, reached the oldest version"
		exit 2
	else
		updateFirmware $previous_tagname
	fi
	exit 0
fi

if [[ ! -f "${FW_CURRENT_REV}" ]];then
	updateFirmware "" "no_ending_prompt"
	# provide reinstall flag but never installed, give a reinstall feedback
	if $OPT_REINSTALL;then
		echoGreen "*** Reinstall success"
	else
		installUpdates
	fi
else
	# perform reinstall
	if $OPT_REINSTALL;then
		current_tagname=$(cat "${FW_CURRENT_REV}")
		updateFirmware $current_tagname
		echoGreen "*** Reinstall success"
		exit 0
	fi
	installUpdates
fi
exit 0

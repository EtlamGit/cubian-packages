#!/bin/bash
echo "This program tries to stress the processor, attempting to generate as much heat as possible. Improperly cooled or otherwise flawed hardware may potentially overheat and fail. Use at your own risk!"
echo ""
start_timestamp=$(date +"%s")
start_timestring=$(date --date @$start_timestamp)
echo "cpuburn is started at `date`"
echo ""
echo "Press CTRL + C to STOP"

/usr/lib/cpuburn-sunxi/cpuburn-arm/cpuburn-a7 &

#echo "process pid $!"
#echo "bash pid $$"

displaytime() {
  local T=$1
  local D=$((T/60/60/24))
  local H=$((T/60/60%24))
  local M=$((T/60%60))
  local S=$((T%60))
  [[ $D > 0 ]] && printf '%d days ' $D
  [[ $H > 0 ]] && printf '%d hours ' $H
  [[ $M > 0 ]] && printf '%d minutes ' $M
  [[ ($D > 0 || $H > 0 || $M > 0) && $S > 0 ]]  && printf 'and '
  printf '%d seconds\n' $S
}

control_c(){
    echo ""
    end_timestamp=$(date +"%s")
    end_timestring=$(date --date @$end_timestamp)
    echo "cpuburn is stopped at $end_timestring"
    echo $(displaytime $(($end_timestamp-$start_timestamp)))
    pkill cpuburn-a7 &
    exit 0
}

get_temp(){
local temp=$(cat /sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/temp1_input)
temp=$(echo "scale=1;${temp}/1000" | bc)
cel=$(awk 'BEGIN { print "\302\260C"; }')
echo ${temp}${cel}
}

trap control_c SIGINT

count=1
while true;
do
    if [ $((count%5)) = "0" ];then
        printf "%s" $(get_temp)
    else
        printf "."
    fi
    count=$((count+1))
    sleep 1 
done
